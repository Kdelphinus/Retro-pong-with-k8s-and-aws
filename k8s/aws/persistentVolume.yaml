apiVersion: storage.k8s.io/v1
kind: StorageClass  # 동적 프로비저닝
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com  # AWS EBS CSI 드라이버를 사용하여 스토리지를 동적으로 프로비저닝
volumeBindingMode: WaitForFirstConsumer  # 처음으로 사용하는 파드가 생성되기 전까지 프로비저닝되지 않음
allowVolumeExpansion: true  # EBS 볼륨 확장을 허용
parameters:
  type: gp3  # AWS EBS에서 gp3 유형의 볼륨 사용. 일반적인 SSD 스토리지 유형
  encrypted: "true"  # EBS 볼륨 암호화

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: efs-sc  # pv는 글로벌 범위기에 namespace 표기 할 필요 없음
provisioner: efs.csi.aws.com  # AWS EFS CSI 드라이버 사용하여 스토리지를 동적으로 프로비저닝
parameters:
  provisioningMode: efs-ap  # EFS의 Access Point를 사용하여 파일 시스템을 연결
  fileSystemId: fs-  # TODO 생성한 efs ID 입력
  directoryPerms: "700"  # EFS 파일 시스템 내의 디렉터리 권한 설정. 700은 소유자만 읽기, 쓰기, 실행 권한을 가짐

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-data
  namespace: app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: ebs-sc

---

# AWS EFS는 파일 시스템이므로 스토리지 크기를 고정하지 않는다. 즉 용량을 미리 할당하지 않으며 요청된 용량도 무시된다.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: back-data
  namespace: app
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 1Mi  # EFS는 이 값을 무시하지만 누락되면 오류가 발생하기에 최소 크기 요청
